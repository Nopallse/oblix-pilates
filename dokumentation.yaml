openapi: 3.0.0
info:
  title: Oblix Pilates API
  description: API untuk aplikasi Oblix Pilates - sistem manajemen studio pilates
  version: 1.0.0
  contact:
    name: API Support
    email: support@oblixpilates.com

servers:
  - url: http://34.101.143.2:3020/api
    description: Testing server
  - url: http://localhost:3000/api
    description: Development server



components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        role:
          type: string
          enum: [admin, user]
        refreshToken:
          type: string
          nullable: true

    Member:
      type: object
      properties:
        id:
          type: string
          format: uuid
        member_code:
          type: string
        username:
          type: string
        full_name:
          type: string
        phone_number:
          type: string
        dob:
          type: string
          format: date
        address:
          type: string
        date_of_join:
          type: string
          format: date
        picture:
          type: string
          nullable: true
        status:
          type: string

    RegisterRequest:
      type: object
      required:
        - full_name
        - username
        - email
        - dob
        - phone_number
        - password
      properties:
        full_name:
          type: string
          minLength: 3
          maxLength: 150
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
        dob:
          type: string
          format: date
        phone_number:
          type: string
          minLength: 10
          maxLength: 15
        password:
          type: string
          minLength: 6

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email

    ResetPasswordRequest:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
        newPassword:
          type: string
          minLength: 6

    ChangePasswordRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string
          minLength: 6

    UpdateProfileRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        full_name:
          type: string
          minLength: 3
          maxLength: 150
        username:
          type: string
          minLength: 3
          maxLength: 50
        phone_number:
          type: string
          minLength: 10
          maxLength: 15
        dob:
          type: string
          format: date
        address:
          type: string
          maxLength: 500

    Faq:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 255
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateFaqRequest:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        content:
          type: string
          minLength: 10
          maxLength: 1000

    UpdateFaqRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        content:
          type: string
          minLength: 10
          maxLength: 1000

    FaqListResponse:
      type: object
      properties:
        message:
          type: string
        data:
          type: object
          properties:
            faqs:
              type: array
              items:
                $ref: '#/components/schemas/Faq'
            pagination:
              type: object
              properties:
                currentPage:
                  type: integer
                totalPages:
                  type: integer
                totalItems:
                  type: integer
                itemsPerPage:
                  type: integer

    Testimonial:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 150
        age:
          type: integer
          minimum: 1
          maximum: 150
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateTestimonialRequest:
      type: object
      required:
        - name
        - age
        - content
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 150
        age:
          type: integer
          minimum: 1
          maximum: 150
        content:
          type: string
          minLength: 10
          maxLength: 1000

    UpdateTestimonialRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 150
        age:
          type: integer
          minimum: 1
          maximum: 150
        content:
          type: string
          minLength: 10
          maxLength: 1000

    TestimonialListResponse:
      type: object
      properties:
        message:
          type: string
        data:
          type: object
          properties:
            testimonials:
              type: array
              items:
                $ref: '#/components/schemas/Testimonial'
            pagination:
              type: object
              properties:
                currentPage:
                  type: integer
                totalPages:
                  type: integer
                totalItems:
                  type: integer
                itemsPerPage:
                  type: integer

    Trainer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 255
        picture:
          type: string
          nullable: true
        description:
          type: string
        instagram:
          type: string
          nullable: true
        tiktok:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateTrainerRequest:
      type: object
      required:
        - title
        - description
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        description:
          type: string
          minLength: 10
          maxLength: 1000
        instagram:
          type: string
          format: uri
        tiktok:
          type: string
          format: uri
        picture:
          type: string
          format: binary
          description: Trainer picture (JPG, PNG, GIF, WebP, max 5MB)

    UpdateTrainerRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        description:
          type: string
          minLength: 10
          maxLength: 1000
        instagram:
          type: string
          format: uri
        tiktok:
          type: string
          format: uri
        picture:
          type: string
          format: binary
          description: Trainer picture (JPG, PNG, GIF, WebP, max 5MB)

    TrainerListResponse:
      type: object
      properties:
        message:
          type: string
        data:
          type: object
          properties:
            trainers:
              type: array
              items:
                $ref: '#/components/schemas/Trainer'
            pagination:
              type: object
              properties:
                currentPage:
                  type: integer
                totalPages:
                  type: integer
                totalItems:
                  type: integer
                itemsPerPage:
                  type: integer

    Banner:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 255
        picture:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateBannerRequest:
      type: object
      required:
        - title
        - picture
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        picture:
          type: string
          format: binary
          description: Banner picture (JPG, PNG, GIF, WebP, max 5MB)

    UpdateBannerRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        picture:
          type: string
          format: binary
          description: Banner picture (JPG, PNG, GIF, WebP, max 5MB)

    BannerListResponse:
      type: object
      properties:
        message:
          type: string
        data:
          type: object
          properties:
            banners:
              type: array
              items:
                $ref: '#/components/schemas/Banner'
            pagination:
              type: object
              properties:
                currentPage:
                  type: integer
                totalPages:
                  type: integer
                totalItems:
                  type: integer
                itemsPerPage:
                  type: integer

    Gallery:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 255
        picture:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateGalleryRequest:
      type: object
      required:
        - title
        - picture
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        picture:
          type: string
          format: binary
          description: Gallery picture (JPG, PNG, GIF, WebP, max 5MB)

    UpdateGalleryRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        picture:
          type: string
          format: binary
          description: Gallery picture (JPG, PNG, GIF, WebP, max 5MB)

    GalleryListResponse:
      type: object
      properties:
        message:
          type: string
        data:
          type: object
          properties:
            galleries:
              type: array
              items:
                $ref: '#/components/schemas/Gallery'
            pagination:
              type: object
              properties:
                currentPage:
                  type: integer
                totalPages:
                  type: integer
                totalItems:
                  type: integer
                itemsPerPage:
                  type: integer

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
        data:
          type: object

    ErrorResponse:
      type: object
      properties:
        message:
          type: string

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Register a new user and create member profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user_id:
                            type: string
                            format: uuid
                          email:
                            type: string
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user and return access tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          access_token:
                            type: string
                          refreshToken:
                            type: string
                          user:
                            $ref: '#/components/schemas/User'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: Send password reset link to user's email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Reset link sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password with token
      description: Reset user password using reset token from email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh-token:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get new access token using refresh token
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          access_token:
                            type: string
                          refreshToken:
                            type: string
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /profile:
    get:
      tags:
        - Profile
      summary: Get user profile
      description: Retrieve user profile with member information
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        allOf:
                          - $ref: '#/components/schemas/User'
                          - type: object
                            properties:
                              Member:
                                $ref: '#/components/schemas/Member'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Profile
      summary: Update user profile
      description: Update user profile information and optionally upload profile photo
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                full_name:
                  type: string
                  minLength: 3
                  maxLength: 150
                username:
                  type: string
                  minLength: 3
                  maxLength: 50
                phone_number:
                  type: string
                  minLength: 10
                  maxLength: 15
                dob:
                  type: string
                  format: date
                address:
                  type: string
                  maxLength: 500
                picture:
                  type: string
                  format: binary
                  description: Profile photo (JPG, PNG, GIF, WebP, max 5MB)
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          picture:
                            type: string
        '400':
          description: Validation error or file upload error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /profile/change-password:
    put:
      tags:
        - Profile
      summary: Change user password
      description: Change user password with current password verification
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid current password or validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /profile/profile-photo:
    delete:
      tags:
        - Profile
      summary: Delete profile photo
      description: Remove user's profile photo
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Profile photo deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /faq:
    get:
      tags:
        - FAQ
      summary: Get all FAQs
      description: Retrieve all FAQs with pagination and search functionality
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search term for title and content
      responses:
        '200':
          description: FAQs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaqListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - FAQ
      summary: Create new FAQ
      description: Create a new FAQ (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFaqRequest'
      responses:
        '201':
          description: FAQ created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Faq'
        '400':
          description: Validation error or FAQ with same title exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /faq/{id}:
    get:
      tags:
        - FAQ
      summary: Get FAQ by ID
      description: Retrieve a specific FAQ by its ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: FAQ ID
      responses:
        '200':
          description: FAQ retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Faq'
        '400':
          description: Invalid FAQ ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: FAQ not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - FAQ
      summary: Update FAQ
      description: Update an existing FAQ (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: FAQ ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFaqRequest'
      responses:
        '200':
          description: FAQ updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Faq'
        '400':
          description: Validation error, invalid ID format, or FAQ with same title exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: FAQ not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - FAQ
      summary: Delete FAQ
      description: Delete an existing FAQ (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: FAQ ID
      responses:
        '200':
          description: FAQ deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid FAQ ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: FAQ not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /testimonial:
    get:
      tags:
        - Testimonial
      summary: Get all testimonials
      description: Retrieve all testimonials with pagination and search functionality
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search term for name and content
      responses:
        '200':
          description: Testimonials retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestimonialListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Testimonial
      summary: Create new testimonial
      description: Create a new testimonial (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTestimonialRequest'
      responses:
        '201':
          description: Testimonial created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Testimonial'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /testimonial/{id}:
    get:
      tags:
        - Testimonial
      summary: Get testimonial by ID
      description: Retrieve a specific testimonial by its ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Testimonial ID
      responses:
        '200':
          description: Testimonial retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Testimonial'
        '400':
          description: Invalid testimonial ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Testimonial not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Testimonial
      summary: Update testimonial
      description: Update an existing testimonial (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Testimonial ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTestimonialRequest'
      responses:
        '200':
          description: Testimonial updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Testimonial'
        '400':
          description: Validation error or invalid ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Testimonial not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Testimonial
      summary: Delete testimonial
      description: Delete an existing testimonial (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Testimonial ID
      responses:
        '200':
          description: Testimonial deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid testimonial ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Testimonial not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /trainer:
    get:
      tags:
        - Trainer
      summary: Get all trainers
      description: Retrieve all trainers with pagination and search functionality
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search term for title and description
      responses:
        '200':
          description: Trainers retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainerListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Trainer
      summary: Create new trainer
      description: Create a new trainer with optional picture upload (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateTrainerRequest'
      responses:
        '201':
          description: Trainer created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Trainer'
        '400':
          description: Validation error or trainer with same title exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /trainer/{id}:
    get:
      tags:
        - Trainer
      summary: Get trainer by ID
      description: Retrieve a specific trainer by its ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Trainer ID
      responses:
        '200':
          description: Trainer retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Trainer'
        '400':
          description: Invalid trainer ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trainer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Trainer
      summary: Update trainer
      description: Update an existing trainer with optional picture upload (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Trainer ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateTrainerRequest'
      responses:
        '200':
          description: Trainer updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Trainer'
        '400':
          description: Validation error, invalid ID format, or trainer with same title exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trainer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Trainer
      summary: Delete trainer
      description: Delete an existing trainer and its picture (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Trainer ID
      responses:
        '200':
          description: Trainer deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid trainer ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trainer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /trainer/{id}/picture:
    delete:
      tags:
        - Trainer
      summary: Delete trainer picture
      description: Delete trainer's picture only (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Trainer ID
      responses:
        '200':
          description: Trainer picture deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid trainer ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trainer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /banner:
    get:
      tags:
        - Banner
      summary: Get all banners
      description: Retrieve all banners with pagination and search functionality
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search term for title
      responses:
        '200':
          description: Banners retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BannerListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Banner
      summary: Create new banner
      description: Create a new banner with picture upload (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateBannerRequest'
      responses:
        '201':
          description: Banner created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Banner'
        '400':
          description: Validation error, missing picture, or banner with same title exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /banner/{id}:
    get:
      tags:
        - Banner
      summary: Get banner by ID
      description: Retrieve a specific banner by its ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Banner ID
      responses:
        '200':
          description: Banner retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Banner'
        '400':
          description: Invalid banner ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Banner not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Banner
      summary: Update banner
      description: Update an existing banner with optional picture upload (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Banner ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateBannerRequest'
      responses:
        '200':
          description: Banner updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Banner'
        '400':
          description: Validation error, invalid ID format, or banner with same title exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Banner not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Banner
      summary: Delete banner
      description: Delete an existing banner and its picture (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Banner ID
      responses:
        '200':
          description: Banner deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid banner ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Banner not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /gallery:
    get:
      tags:
        - Gallery
      summary: Get all galleries
      description: Retrieve all galleries with pagination and search functionality
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search term for title
      responses:
        '200':
          description: Galleries retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GalleryListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Gallery
      summary: Create new gallery
      description: Create a new gallery with picture upload (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateGalleryRequest'
      responses:
        '201':
          description: Gallery created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Gallery'
        '400':
          description: Validation error, missing picture, or gallery with same title exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /gallery/{id}:
    get:
      tags:
        - Gallery
      summary: Get gallery by ID
      description: Retrieve a specific gallery by its ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Gallery ID
      responses:
        '200':
          description: Gallery retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Gallery'
        '400':
          description: Invalid gallery ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Gallery not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Gallery
      summary: Update gallery
      description: Update an existing gallery with optional picture upload (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Gallery ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateGalleryRequest'
      responses:
        '200':
          description: Gallery updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Gallery'
        '400':
          description: Validation error, invalid ID format, or gallery with same title exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Gallery not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Gallery
      summary: Delete gallery
      description: Delete an existing gallery and its picture (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Gallery ID
      responses:
        '200':
          description: Gallery deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid gallery ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Gallery not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

tags:
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: Profile
    description: User profile management endpoints
  - name: FAQ
    description: FAQ management endpoints
  - name: Testimonial
    description: Testimonial management endpoints
  - name: Trainer
    description: Trainer management endpoints
  - name: Banner
    description: Banner management endpoints
  - name: Gallery
    description: Gallery management endpoints